name: Build

on:
  push:
    branches:
      - 'master'
      - 'releases/**'
      - 'tests/**'
      - 'feature/**'
  pull_request:
  workflow_dispatch:

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  # ArchLinux build
  archlinux-build:
    name: üêß ArchLinux
    runs-on: ubuntu-24.04

    container:
      image: archlinux:base-devel

    permissions:
      id-token: write
      attestations: write

    steps:
      - name: ‚¨áÔ∏è Update all packages
        run: |
          pacman -Syyu --noconfirm

      - name: ‚¨áÔ∏è Install setup dependencies
        run: |
          pacman -Syu git ccache --noconfirm

      - name: üß∞ Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: ‚¨áÔ∏è Install ImHex dependencies
        run: |
          dist/get_deps_archlinux.sh --noconfirm

      - name: ‚¨áÔ∏è Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.100'

      - name: üìú Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: archlinux-ccache-${{ github.run_id }}
          restore-keys: archlinux-ccache
          max-size: 1G

      # ArchLinux cmake build
      - name: üõ†Ô∏è Configure CMake
        run: |
          set -x
          mkdir -p build
          cd build
          CC=gcc CXX=g++ cmake -G "Ninja"               \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}      \
          -DCMAKE_INSTALL_PREFIX="/usr"                 \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache            \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache          \
          -DUSE_SYSTEM_FMT=OFF                           \
          -DUSE_SYSTEM_YARA=ON                          \
          -DUSE_SYSTEM_NLOHMANN_JSON=ON                 \
          -DUSE_SYSTEM_CAPSTONE=OFF                     \
          -DIMHEX_PATTERNS_PULL_MASTER=ON               \
          -DIMHEX_COMMIT_HASH_LONG="${GITHUB_SHA}"      \
          -DIMHEX_COMMIT_BRANCH="${GITHUB_REF##*/}"     \
          -DIMHEX_ENABLE_LTO=ON                         \
          -DIMHEX_USE_GTK_FILE_PICKER=ON                \
          -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
          ..

      - name: üõ†Ô∏è Build
        run: cd build && DESTDIR=installDir ninja install

      - name: üìú Set version variable
        run: |
          echo "IMHEX_VERSION=`cat VERSION`" >> $GITHUB_ENV

      - name: ‚úíÔ∏è Prepare PKGBUILD
        run: |
          cp dist/Arch/PKGBUILD build
          sed -i 's/%version%/${{ env.IMHEX_VERSION }}/g' build/PKGBUILD

    # makepkg doesn't want to run as root, so I had to chmod 777 all over
      - name: üì¶ Package ArchLinux .pkg.tar.zst
        run: |
          set -x
          cd build

          # the name is a small trick to make makepkg recognize it as the source
          # else, it would try to download the file from the release
          tar -cvf imhex-${{ env.IMHEX_VERSION }}-ArchLinux-x86_64.pkg.tar.zst -C installDir .

          chmod -R 777 .

          sudo -u nobody makepkg

          # Replace the old file
          rm imhex-${{ env.IMHEX_VERSION }}-ArchLinux-x86_64.pkg.tar.zst
          rm *imhex-bin-debug* # rm debug package which is created for some reason
          mv *.pkg.tar.zst imhex-${{ env.IMHEX_VERSION }}-ArchLinux-x86_64.pkg.tar.zst

      - name: üóùÔ∏è Generate build provenance attestations
        uses: actions/attest-build-provenance@v2
        if: ${{ github.event.repository.fork == false && github.event_name != 'pull_request' }}
        with:
          subject-path: |
            build/imhex-${{ env.IMHEX_VERSION }}-ArchLinux-x86_64.pkg.tar.zst

      - name: ‚¨ÜÔ∏è Upload imhex-archlinux.pkg.tar.zst
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ArchLinux .pkg.tar.zst x86_64
          path: |
            build/imhex-${{ env.IMHEX_VERSION }}-ArchLinux-x86_64.pkg.tar.zst

